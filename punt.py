import sys
import math
from datetime import date
from operator import methodcaller

from blumblumshub import BlumBlumShubRandom

if len(sys.argv) != 3:
    print >>sys.stderr, "Usage: %s SEEDS_FILE USERNAMES_FILE"
    print >>sys.stderr
    print >>sys.stderr, "USERNAMES_FILE should have one username per line."
    print >>sys.stderr, "First seniors, then an empty line, juniors, then an empty line, sophomores"
    print >>sys.stderr, "currently in doubles, then an empty line, and sophomores currently in singles"
    sys.exit(-1)

security = 128 # symmetric-key equivalent
paranoid = True # bail out if too much randomness is requested
bit_count = 0L # generator starts out unused
bit_count_limit = int(2**16 * 1.7) # maximum number of bits we can produce before we have to bail out
cache = 0L # generator hasn't produced any randomness
cache_len = 0L # generator hasn't produced any randomness
modulus_length = 16374 # 16 kilobit modulus
bits_per_iteration = 7 # minimizes computation while keeping security guarantees
# bigass semiprime for BBS
modulus = 718439245142313481300440564715044374488783175163583072835595669961898097412751021950560053166568912463858188429554654938331299157137474437363824473346879629091392457560491871015959470256642988110875896914725916084520808576942217880545559267117399798301580900824086069498035055025067334140383551304603638674462415492151438451507272669418284652199387138338463349894325609930667447818452729424979575214931242944305092955821032903089831332657104851845509061083759078989640507597227557219849025700154444378384506084580191922542079978205858794273941464073681520376491225613771304076912721161368290152832487147380363336743488700563514261883730231567276153922823145056995117682436241082897998510053131078630405280672551864363932403128780854139301777678281877190696563875801348494974214891981978329616655191205104575363106664656254837759706336045850642170698010085678941754488307352068449889032009652496517729870597226665680840645018820974628526419407118431670219340624702141008513563783992086006103323105187348019703085251441237255416779945623371992251622899138830059792093612406227022970356027147341910874458711943963912704387306971264376469734242596373806589269674356907432258966338392425505615127202027612654309714262364800483435097525163142349826720488003046142623553603124171718399994875182548316030715947025636680257122515516049731378289813170155850916760025098319582641713776895213516860330921071620791384065110673183061801532729044397722668459340302877170885501730452404780946262633096509390381438470279796619650128136322954252360767547817613950411604640675639654143550629838402573681959741992805501585236264229486244407119327400256361474696663270166287776439545801571369282331965287237199575936993131343159467067967810603404336050898058762135243498855487917542884255580247634034679119205490817246497561717072463264679692397263060968135096269264707707578012319698202691713568522589887354021472084357716202470158573372678040124671842730315573160821479427428568066215702984376506129097330774138984449991581390991824208520442488726121143622950780436838564775827261477146969160526796623341753607385391653573967338805436314369490502627833217291098331393593817735810469695420410934833288696600085522098195693047466506200783854252210627510736609853735971479191290718099275759537585749342485218692934026400302564537898843225499935906934024658989189121309167692315501006919713678617533981081931908624700611052975770678785468830684936064799776652686758568292392186302673430555742440928433432030179135055103503482701826752272571864096101325135165710578673147123374864710207806050595134459686199091999760810761011906893006328413162224590074421684597272489696271000231676949925614235092959835411043293000322855527070798572093898280801459456800898098420838143454321914779003534528035938266876310401437854084069264949210580222879383703391363321646539704896551228047882295378049074550808872443553308823441707608564110223826212592985562053514372769745838523313843318338925380216005933739344132670813600518924617151343497753755979877121471250148333236198908499239566799420987890039714109352287020240700923898708717204564007796925726450337548248433990122411386837108166012736618386730960093274842334791851377852602395483873085556735691472344215043670934859269350838740536041033773505179165798618463718317103220189549426186408474578909058814627388367388179761111894912922353942337281237861696360155728777025819499832931536009277306799235714680911122265291193347240105592628685389256750193525650343846194946260388143347768076462430191850273266444145085816088839634624757353774313634743279087132124813805660460559089273265212639899734088472896233262898494936629517820197533812049335358375193245722617869599019896739338909381950691412181756717052881055463545892965819646857340775134311465516232245420880258959192471249171995203470019204021430046194538112722720379857438092283536449618922638128788953370418255303349744131225509258893151917943155463490461575134659728146381811091256266505806140216049962974084374303308310244051553783936647134913722113056575980248500246785753839956010421600569219929494767448244038780149477679396187518202248891626276801464211659259971931210802816838587880970486098591626511693253276586398490120816217074789867446355081842096394383851077773415469899772632397859152708121734600267653105975389768411880231752504868264084722384688411697332758101961451401390927946997032237009526660100438243522112570046001001658466427318660332633979687419076586833743968661344408921229107513187995285350336642662828673996566922710723992641287878708775357905216908159055025522788417066433324554579314700014759570536508065911773948901054403516120889802394884695173457634166892999059877552152941963047257246586563013292583359004243014564543605977573759784072380593255389998070859456473997847393961554463852130184448687211889706556178516657803690040328638786296302029739476243985181347922971027892111469667024754436480983787629659252054248548859793L
skip_modulus = None # I'm not going to tell you the totient, that would be cheating :P

print >>sys.stderr, "Reading state from", sys.argv[1]
offset = date.today().year - 2013
state = int(open(sys.argv[1]).readlines()[offset].strip(),16)

print >>sys.stderr, "Reading usernames from", sys.argv[2]
names = map(methodcaller("strip"), open(sys.argv[2]).readlines())
seniors_end = names.index('')
juniors_end = names.index('', seniors_end+1)
doubled_sophomores_end = names.index('', juniors_end+1)

seniors = sorted(map(methodcaller('lower'), names[:names.index('')]))
juniors = sorted(map(methodcaller('lower'), names[seniors_end+1:juniors_end]))
doubled_sophomores = sorted(map(methodcaller('lower'), names[juniors_end+1:doubled_sophomores_end]))
sophomores = sorted(map(methodcaller('lower'), names[doubled_sophomores_end+1:]))

print >>sys.stderr, "Rising Seniors:"
for name in seniors:
    print >>sys.stderr, "\t"+name
print >>sys.stderr
print >>sys.stderr, "Rising Juniors:"
for name in juniors:
    print >>sys.stderr, "\t"+name
print >>sys.stderr
print >>sys.stderr, "Rising Sophomores (currently in doubles):"
for name in doubled_sophomores:
    print >>sys.stderr, "\t"+name
print >>sys.stderr 
print >>sys.stderr, "Rising Sophomores (currently in singles):"
for name in sophomores:
    print >>sys.stderr, "\t"+name
print >>sys.stderr
print >>sys.stderr, "Is this correct? (type 'YES'): ",
response = raw_input()
if response != 'YES':
    sys.exit(1)

print >>sys.stderr
print >>sys.stderr, "Randomizing... ",

random = BlumBlumShubRandom.from_state((security, paranoid, bit_count,
                                        bit_count_limit, cache, cache_len,
                                        modulus_length, bits_per_iteration,
                                        modulus, state, skip_modulus))

def shuffle(l):
    l = l[:]
    for i in reversed(xrange(1,len(l))):
        j = i
        while j >= i:
            j = random.getrandbits(int(math.ceil(math.log(i))))
        l[i], l[j] = l[j], l[i]
    return l

seniors = shuffle(seniors)
juniors = shuffle(juniors)
doubled_sophomores = shuffle(doubled_sophomores)
sophomores = shuffle(sophomores)

print >>sys.stderr, "done."

with open("puntlist.out","w",0) as outfile:
    outfile.write("SENIORS:\n")
    outfile.writelines((name + "\n" for name in seniors))
    outfile.write("\n")

    outfile.write("JUNIORS:\n")
    outfile.writelines((name + "\n" for name in juniors))
    outfile.write("\n")

    outfile.write("SOPHOMORES:\n")
    outfile.writelines((name + "\n" for name in doubled_sophomores))
    outfile.writelines((name + "\n" for name in sophomores))
    outfile.write("\n")

sys.stdout.write(open("puntlist.out").read())
sys.stdout.flush()

print >>sys.stderr, "Output has also been written to puntlist.out for your convenience"
